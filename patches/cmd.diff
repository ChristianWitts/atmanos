diff --git a/src/cmd/dist/build.go b/src/cmd/dist/build.go
index 184f973..35036d9 100644
--- a/src/cmd/dist/build.go
+++ b/src/cmd/dist/build.go
@@ -59,6 +59,7 @@ var okgoarch = []string{
 
 // The known operating systems.
 var okgoos = []string{
+	"atman",
 	"darwin",
 	"dragonfly",
 	"linux",
diff --git a/src/cmd/internal/obj/link.go b/src/cmd/internal/obj/link.go
index 688c278..b1b6a9c 100644
--- a/src/cmd/internal/obj/link.go
+++ b/src/cmd/internal/obj/link.go
@@ -545,6 +545,7 @@ const (
 	Hplan9
 	Hsolaris
 	Hwindows
+	Hatman
 )
 
 type Plist struct {
diff --git a/src/cmd/internal/obj/sym.go b/src/cmd/internal/obj/sym.go
index 37bb40b..4092393 100644
--- a/src/cmd/internal/obj/sym.go
+++ b/src/cmd/internal/obj/sym.go
@@ -56,6 +56,7 @@ var headers = []struct {
 	{"solaris", Hsolaris},
 	{"windows", Hwindows},
 	{"windowsgui", Hwindows},
+	{"atman", Hatman},
 }
 
 func headtype(name string) int {
@@ -124,7 +125,8 @@ func Linknew(arch *LinkArch) *Link {
 		Hnetbsd,
 		Hopenbsd,
 		Hdragonfly,
-		Hsolaris:
+		Hsolaris,
+		Hatman:
 		ctxt.Tlsoffset = -1 * ctxt.Arch.Ptrsize
 
 	case Hnacl:
diff --git a/src/cmd/internal/obj/x86/asm6.go b/src/cmd/internal/obj/x86/asm6.go
index 7a69dc8..4d7998b 100644
--- a/src/cmd/internal/obj/x86/asm6.go
+++ b/src/cmd/internal/obj/x86/asm6.go
@@ -1949,7 +1949,7 @@ func prefixof(ctxt *obj.Link, p *obj.Prog, a *obj.Addr) int {
 			default:
 				log.Fatalf("unknown TLS base register for %s", obj.Headstr(ctxt.Headtype))
 
-			case obj.Hlinux:
+			case obj.Hlinux, obj.Hatman:
 				if ctxt.Flag_shared != 0 {
 					log.Fatalf("unknown TLS base register for linux with -shared")
 				} else {
@@ -3779,7 +3779,8 @@ func doasm(ctxt *obj.Link, p *obj.Prog) {
 							log.Fatalf("unknown TLS base location for %s", obj.Headstr(ctxt.Headtype))
 
 						case obj.Hlinux,
-							obj.Hnacl:
+							obj.Hnacl,
+							obj.Hatman:
 							// ELF TLS base is 0(GS).
 							pp.From = p.From
 
@@ -3830,7 +3831,8 @@ func doasm(ctxt *obj.Link, p *obj.Prog) {
 					default:
 						log.Fatalf("unknown TLS base location for %s", obj.Headstr(ctxt.Headtype))
 
-					case obj.Hlinux:
+					case obj.Hlinux,
+						obj.Hatman:
 						if ctxt.Flag_shared == 0 {
 							log.Fatalf("unknown TLS base location for linux without -shared")
 						}
diff --git a/src/cmd/internal/obj/x86/obj6.go b/src/cmd/internal/obj/x86/obj6.go
index fa9c474..d914891 100644
--- a/src/cmd/internal/obj/x86/obj6.go
+++ b/src/cmd/internal/obj/x86/obj6.go
@@ -44,7 +44,8 @@ func canuse1insntls(ctxt *obj.Link) bool {
 		case obj.Hlinux,
 			obj.Hnacl,
 			obj.Hplan9,
-			obj.Hwindows:
+			obj.Hwindows,
+			obj.Hatman:
 			return false
 		}
 
@@ -55,7 +56,7 @@ func canuse1insntls(ctxt *obj.Link) bool {
 	case obj.Hplan9,
 		obj.Hwindows:
 		return false
-	case obj.Hlinux:
+	case obj.Hlinux, obj.Hatman:
 		return ctxt.Flag_shared == 0
 	}
 
diff --git a/src/cmd/link/internal/amd64/asm.go b/src/cmd/link/internal/amd64/asm.go
index 74ec9dd..3ed2c46 100644
--- a/src/cmd/link/internal/amd64/asm.go
+++ b/src/cmd/link/internal/amd64/asm.go
@@ -685,7 +685,8 @@ func asmb() {
 		obj.Hnetbsd,
 		obj.Hopenbsd,
 		obj.Hdragonfly,
-		obj.Hsolaris:
+		obj.Hsolaris,
+		obj.Hatman:
 		ld.Debug['8'] = 1 /* 64-bit addresses */
 
 	case obj.Hnacl,
@@ -718,7 +719,8 @@ func asmb() {
 			obj.Hopenbsd,
 			obj.Hdragonfly,
 			obj.Hsolaris,
-			obj.Hnacl:
+			obj.Hnacl,
+			obj.Hatman:
 			symo = int64(ld.Segdata.Fileoff + ld.Segdata.Filelen)
 			symo = ld.Rnd(symo, int64(ld.INITRND))
 
@@ -806,7 +808,8 @@ func asmb() {
 		obj.Hopenbsd,
 		obj.Hdragonfly,
 		obj.Hsolaris,
-		obj.Hnacl:
+		obj.Hnacl,
+		obj.Hatman:
 		ld.Asmbelf(symo)
 
 	case obj.Hwindows:
diff --git a/src/cmd/link/internal/amd64/obj.go b/src/cmd/link/internal/amd64/obj.go
index 1aa4422..bcd3892 100644
--- a/src/cmd/link/internal/amd64/obj.go
+++ b/src/cmd/link/internal/amd64/obj.go
@@ -111,7 +111,8 @@ func archinit() {
 		obj.Hnetbsd,
 		obj.Hopenbsd,
 		obj.Hsolaris,
-		obj.Hwindows:
+		obj.Hwindows,
+		obj.Hatman:
 		break
 	}
 
@@ -164,7 +165,8 @@ func archinit() {
 		obj.Hnetbsd,    /* netbsd */
 		obj.Hopenbsd,   /* openbsd */
 		obj.Hdragonfly, /* dragonfly */
-		obj.Hsolaris:   /* solaris */
+		obj.Hsolaris,   /* solaris */
+		obj.Hatman:
 		ld.Elfinit()
 
 		ld.HEADR = ld.ELFRESERVE
diff --git a/src/cmd/link/internal/arm64/asm.go b/src/cmd/link/internal/arm64/asm.go
index 3aebd8a..ddd9651 100644
--- a/src/cmd/link/internal/arm64/asm.go
+++ b/src/cmd/link/internal/arm64/asm.go
@@ -416,7 +416,8 @@ func asmb() {
 		obj.Hfreebsd,
 		obj.Hnetbsd,
 		obj.Hopenbsd,
-		obj.Hnacl:
+		obj.Hnacl,
+		obj.Hatman:
 		ld.Asmbelf(int64(symo))
 
 	case obj.Hdarwin:
diff --git a/src/cmd/link/internal/arm64/obj.go b/src/cmd/link/internal/arm64/obj.go
index 56f5815..77796c0 100644
--- a/src/cmd/link/internal/arm64/obj.go
+++ b/src/cmd/link/internal/arm64/obj.go
@@ -100,7 +100,7 @@ func archinit() {
 		if ld.Linkmode == ld.LinkExternal && obj.Getgoextlinkenabled() != "1" {
 			log.Fatalf("cannot use -linkmode=external with -H %s", ld.Headstr(int(ld.HEADTYPE)))
 		}
-	case obj.Hlinux, obj.Hdarwin:
+	case obj.Hlinux, obj.Hdarwin, obj.Hatman:
 		break
 	}
 
@@ -121,7 +121,8 @@ func archinit() {
 			ld.INITRND = 4096
 		}
 
-	case obj.Hlinux: /* arm64 elf */
+	case obj.Hlinux,
+		obj.Hatman: /* arm64 elf */
 		ld.Elfinit()
 		ld.HEADR = ld.ELFRESERVE
 		if ld.INITTEXT == -1 {
diff --git a/src/cmd/link/internal/ld/elf.go b/src/cmd/link/internal/ld/elf.go
index 508f055..9239b7d 100644
--- a/src/cmd/link/internal/ld/elf.go
+++ b/src/cmd/link/internal/ld/elf.go
@@ -1103,6 +1103,52 @@ func elfwritenetbsdsig() int {
 	return int(sh.size)
 }
 
+// Atman signature
+func elfatmansig(sh *ElfShdr, startva uint64, resoff uint64) int {
+	n := 4 + 8
+	return elfnote(sh, startva, resoff, n, true)
+}
+
+func elfwriteatmansig() int {
+	var n int
+
+	sh := elfwritenotehdr(".note.Xen.loader", 4, 8, 8)
+	if sh == nil {
+		return n
+	}
+	n += int(sh.size)
+
+	Cwrite([]byte("Xen\x00"))
+	Cwrite([]byte("generic\x00"))
+
+	sh = elfwritenotehdr(".note.Xen.version", 4, 8, 5)
+	if sh == nil {
+		return n
+	}
+	n += int(sh.size)
+
+	Cwrite([]byte("Xen\x00"))
+	Cwrite([]byte("xen-3.0\x00"))
+
+	sh = elfwritenotehdr(".note.Xen.hypercall_page", 4, 8, 2)
+	if sh == nil {
+		return n
+	}
+	n += int(sh.size)
+
+	Cwrite([]byte("Xen\x00"))
+
+	var (
+		hypercallPage      = Linklookup(Ctxt, "runtime._atman_hypercall_page", 0)
+		pageSize           = uint64(0x1000)
+		pageStart          = uint64(Symaddr(hypercallPage))
+		hypercallPageStart = (pageStart + pageSize - 1) &^ (pageSize - 1)
+	)
+	Thearch.Vput(hypercallPageStart)
+
+	return n
+}
+
 // OpenBSD Signature
 const (
 	ELF_NOTE_OPENBSD_NAMESZ  = 8
@@ -1686,6 +1732,13 @@ func doelf() {
 	if buildid != "" {
 		Addstring(shstrtab, ".note.go.buildid")
 	}
+
+	if HEADTYPE == obj.Hatman {
+		Addstring(shstrtab, ".note.Xen.loader")
+		Addstring(shstrtab, ".note.Xen.version")
+		Addstring(shstrtab, ".note.Xen.hypercall_page")
+	}
+
 	Addstring(shstrtab, ".elfdata")
 	Addstring(shstrtab, ".rodata")
 	Addstring(shstrtab, ".typelink")
@@ -2042,7 +2095,7 @@ func Asmbelf(symo int64) {
 	 * segment boundaries downwards to include it.
 	 * Except on NaCl where it must not be loaded.
 	 */
-	if HEADTYPE != obj.Hnacl {
+	if HEADTYPE != obj.Hnacl && false {
 		o := int64(Segtext.Vaddr - pph.vaddr)
 		Segtext.Vaddr -= uint64(o)
 		Segtext.Length += uint64(o)
@@ -2130,6 +2183,35 @@ func Asmbelf(symo int64) {
 		phsh(pnote, sh)
 	}
 
+	if HEADTYPE == obj.Hatman {
+		{
+			sh := elfshname(".note.Xen.loader")
+			resoff -= int64(elfatmansig(sh, uint64(startva), uint64(resoff)))
+			pnote := newElfPhdr()
+			pnote.type_ = PT_NOTE
+			pnote.flags = PF_R
+			phsh(pnote, sh)
+		}
+
+		{
+			sh := elfshname(".note.Xen.version")
+			resoff -= int64(elfatmansig(sh, uint64(startva), uint64(resoff)))
+			pnote := newElfPhdr()
+			pnote.type_ = PT_NOTE
+			pnote.flags = PF_R
+			phsh(pnote, sh)
+		}
+
+		{
+			sh := elfshname(".note.Xen.hypercall_page")
+			resoff -= int64(elfatmansig(sh, uint64(startva), uint64(resoff)))
+			pnote := newElfPhdr()
+			pnote.type_ = PT_NOTE
+			pnote.flags = PF_R
+			phsh(pnote, sh)
+		}
+	}
+
 	// Additions to the reserved area must be above this line.
 
 	elfphload(&Segtext)
@@ -2445,6 +2527,9 @@ elfobj:
 			a += int64(elfwritegobuildid())
 		}
 	}
+	if HEADTYPE == obj.Hatman {
+		a += int64(elfwriteatmansig())
+	}
 
 	if a > elfreserve {
 		Diag("ELFRESERVE too small: %d > %d", a, elfreserve)
diff --git a/src/cmd/link/internal/ld/sym.go b/src/cmd/link/internal/ld/sym.go
index 652109d..a096d4c 100644
--- a/src/cmd/link/internal/ld/sym.go
+++ b/src/cmd/link/internal/ld/sym.go
@@ -53,6 +53,7 @@ var headers = []struct {
 	{"freebsd", obj.Hfreebsd},
 	{"linux", obj.Hlinux},
 	{"android", obj.Hlinux}, // must be after "linux" entry or else headstr(Hlinux) == "android"
+	{"atman", obj.Hatman},
 	{"nacl", obj.Hnacl},
 	{"netbsd", obj.Hnetbsd},
 	{"openbsd", obj.Hopenbsd},
@@ -105,7 +106,8 @@ func linknew(arch *LinkArch) *Link {
 		obj.Hnetbsd,
 		obj.Hopenbsd,
 		obj.Hdragonfly,
-		obj.Hsolaris:
+		obj.Hsolaris,
+		obj.Hatman:
 		ctxt.Tlsoffset = -1 * ctxt.Arch.Ptrsize
 
 	case obj.Hnacl:
diff --git a/src/cmd/link/internal/x86/asm.go b/src/cmd/link/internal/x86/asm.go
index d30bd48..5ee6b25 100644
--- a/src/cmd/link/internal/x86/asm.go
+++ b/src/cmd/link/internal/x86/asm.go
@@ -632,7 +632,8 @@ func asmb() {
 		obj.Hfreebsd,
 		obj.Hnetbsd,
 		obj.Hopenbsd,
-		obj.Hnacl:
+		obj.Hnacl,
+		obj.Hatman:
 		ld.Asmbelf(int64(symo))
 
 	case obj.Hwindows:
diff --git a/src/cmd/link/internal/x86/obj.go b/src/cmd/link/internal/x86/obj.go
index ee408f7..89f3f99 100644
--- a/src/cmd/link/internal/x86/obj.go
+++ b/src/cmd/link/internal/x86/obj.go
@@ -100,7 +100,8 @@ func archinit() {
 		obj.Hlinux,
 		obj.Hnetbsd,
 		obj.Hopenbsd,
-		obj.Hwindows:
+		obj.Hwindows,
+		obj.Hatman:
 		break
 	}
 
@@ -138,7 +139,8 @@ func archinit() {
 	case obj.Hlinux, /* elf32 executable */
 		obj.Hfreebsd,
 		obj.Hnetbsd,
-		obj.Hopenbsd:
+		obj.Hopenbsd,
+		obj.Hatman:
 		ld.Elfinit()
 
 		ld.HEADR = ld.ELFRESERVE
